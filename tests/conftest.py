"""
Customization functions for pylint.
"""

import os
import shutil
from pathlib import Path
from typing import Generator
import pytest
from helpers import must_run

def pytest_addoption(parser):
	"""Additional pytest command-line options."""
	parser.addoption("--save-golden-files", action="store_true", default=False, help="Save updated versions of all golden output files")
	parser.addoption("--save-new-draft", action="store_true", default=False, help="Update draft ebook used as base for other tests")

@pytest.fixture(name="book_name")
def fixture_book_name():
	"""Return name of draft book generated by '--save-new-draft' option."""
	return "jane-austen_unknown-novel"

@pytest.fixture
def book_dir(tmp_path: Path, data_dir: Path, book_name: str, update_draft: bool) -> Generator:
	"""Return the Path object for a temporary copy of the draft book content."""
	base_dir = data_dir / "draft"
	src_dir = base_dir / book_name
	if update_draft:
		shutil.rmtree(src_dir)
		old_wd = os.getcwd()
		os.chdir(base_dir)
		try:
			must_run("se create-draft -a 'Jane Austen' -t 'Unknown Novel'")
			must_run("se build-images {}".format(src_dir))
		finally:
			os.chdir(old_wd)
	dest_dir = tmp_path / "book"
	shutil.copytree(src_dir, dest_dir)
	yield dest_dir

@pytest.fixture(name="data_dir")
def fixture_data_dir() -> Path:
	"""Return the Path object for the test data directory."""
	return Path(__file__).parent / "data"

@pytest.fixture
def work_dir(tmp_path: Path) -> Generator:
	"""Return the Path object for a temporary working directory. The current
	working directory is updated to this temporary directory until the test
	returns.
	"""
	old_wd = os.getcwd()
	os.chdir(tmp_path)
	yield tmp_path
	os.chdir(old_wd)

@pytest.fixture
def update_golden(pytestconfig) -> bool:
	"""Save updated versions of all golden output files when this flag is True."""
	return pytestconfig.getoption("--save-golden-files")

@pytest.fixture(name="update_draft")
def fixture_update_draft(pytestconfig) -> bool:
	"""Save updated draft ebook when this flag is True."""
	return pytestconfig.getoption("--save-new-draft")
